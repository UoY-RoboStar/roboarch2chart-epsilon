package maildelivery::types
interface Arm {
ArmPosition ( request : JointTrajectory )
}

interface Base {
Move (  request : Velocities )
const ZERO_LINEAR_VELOCITY : Velocity
const ZERO_ANGULAR_VELOCITY : Velocity
}

interface Gripper {
	Grip (  request : Grip )
}

interface Audio {
Announce (  request : Announcement )
}

datatype Velocities {   linear : Velocity angular : Velocity } 
type Time 
datatype Scan { header : Time startAngle : Angle stopAngle : Angle timeBetweenMeasurements : Time Ranges : Seq( Range ) Intensities : Seq( Intensity ) } 
type Angle 
type Range 
type Intensity 
datatype Grip { position : Distance maxEffort : Force } 
datatype Announcement { message : string } 
type Distance 
type Force 
datatype GripReport { position : Distance effort : Force stalled : boolean reachedGoal : boolean } 
datatype PointImage { header : Time width : nat height : nat points : Seq( ColourPoint ) } 
datatype JointTrajectory { header : Time name : Seq( string ) points : Seq( TrajectoryPoint ) } 
type ColourPoint 
type TrajectoryPoint 
interface PointCloud {
	event envPoints : Scan
}

type Coordinate 

interface ColourPointCloud {
	event envColourPoints : PointImage
}


type Location 
interface SystemConstants {

const ZERO_VELOCITIES : Velocities
}

type Velocity
record Office { number : nat location : Coordinate } 

interface IMove {
    event activateMove
	event deactivateMove
	event executeMove
	event completeMove
	event movePriorityParam: nat
	event moveVelocity: Velocities
}

interface IColourVision {
    event activateColourVision
	event deactivateColourVision
	event executeColourVision
	event completeColourVision
	event colourVisionPriorityParam: nat
	event colourVisionEnvColourPoints: PointImage*nat
}

interface IProximity {
	event activateProximity
	event deactivateProximity
	event executeProximity
	event completeProximity
	event proximityPriorityParam: nat
	event proximityEnvPoints: Scan*nat
}

interface IMoveToLocation {
	event activateMoveToLocation
	event deactivateMoveToLocation
	event executeMoveToLocation
	event completeMoveToLocation
	event moveToLocationPriorityParam: nat
	event moveToLocationTargetParam: Coordinate
	event moveToLocationCurrent: Coordinate
	event moveToLocationHazards: Scan
	event moveToLocationVelocity: Velocities*nat

}

interface IDetermineLocation {
	event activateDetermineLocation
	event deactivateDetermineLocation
	event executeDetermineLocation
	event completeDetermineLocation
	event determineLocationPriorityParam: nat
	event determineLocationImage: PointImage
	event determineLocationLocation: Coordinate*nat
}


type Length 

enumeration Skills { MOVE COLOURVISION PROXIMITY MOVETOLOCATION DETERMINELOCATION } 

interface ISkillsManager {
	event activate : Skills
	event deactivate : Skills
	event getActiveSkills
	event activeSkills : Set(Skills)
	event eventReply: Events
	event initiateEventMonitor: Events
	event stopEventMonitor: Events

	event setMovePriorityParameter: nat
	event getMovePriorityParameter
	event movePriorityParameter: nat

	event setColourVisionPriorityParameter: nat
	event getColourVisionPriorityParameter
	event colourVisionPriorityParameter: nat

	event setProximityPriorityParameter: nat
	event getProximityPriorityParameter
	event proximityPriorityParameter: nat

	event setMoveToLocationPriorityParameter: nat
	event getMoveToLocationPriorityParameter
	event moveToLocationPriorityParameter: nat
	
	event setMoveToLocationTargetParameter: Coordinate
	event getMoveToLocationTargetParameter
	event moveToLocationTargetParameter: Coordinate
	
	event setDetermineLocationPriorityParameter: nat
	event getDetermineLocationPriorityParameter
	event determineLocationPriorityParameter: nat
	
	event getColourVisionEnvColourPointsValue
	event colourVisionEnvColourPointsValue:PointImage
	
	event getProximityEnvPointsValue
	event proximityEnvPointsValue:Scan
	
	event getMoveToLocationVelocityValue
	event moveToLocationVelocityValue:Velocities
	
	event getDetermineLocationLocationValue
	event determineLocationLocationValue:Coordinate
}

enumeration Events { DESTINATIONREACHED }

function UpdateValue ( value : ?X * nat , newValue : ?X * nat  ) : boolean { } 

