package maildelivery::ctl::move

import maildelivery::types::*


stm Move { 
	
	
	uses IMove

	
	
	
	
	var priorityParam : nat , velocity : Velocities , priorityParamInitialised : boolean = 	false  
	 

	initial Initial

	 state Initialise { 
	}

	 state Deactivated { 
	}

	 state Startup { 
	}

	 state Ready { 
	}

	 state HandleActuationCommands { 

	
	entry platformVelocities ! velocity
	}

	 state HandleSensorData { 
	}

	 state Cleanup { 
	}

	transition InitialToInitialise {
		from Initial
		to Initialise
	}

	transition InitialiseToDeactivated {
		from Initialise
		to Deactivated
		condition 	priorityParamInitialised  
	
	}

	transition DeactivatedToStartup {
		from Deactivated
		to Startup
		trigger activateMove 
	}

	transition StartupToReady {
		from Startup
		to Ready
	}

	transition ReadyToHandleActuationCommands {
		from Ready
		to HandleActuationCommands
		trigger executeMove 
	}

	transition HandleActuationCommandsToHandleSensorData {
		from HandleActuationCommands
		to HandleSensorData
	}

	transition HandleSensorDataToReady {
		from HandleSensorData
		to Ready
	  	action completeMove 
	}

	transition ReadyToCleanup {
		from Ready
		to Cleanup
		trigger deactivateMove 
	}

	transition CleanupToDeactivated {
		from Cleanup
		to Deactivated
	}

	transition ReadyReceivevIn {
		from Ready
		to Ready
		trigger moveVelocity ? velocity 
	}

	transition InitialiseReceivePriorityParam {
		from Initialise
		to Initialise
		trigger movePriorityParam ? priorityParam 
	  	action priorityParamInitialised = 	true  
	
	}

	transition DeactivatedReceivePriorityParam {
		from Deactivated
		to Deactivated
		trigger movePriorityParam ? priorityParam 
	}

	transition ReadyReceivePriorityParam {
		from Ready
		to Ready
		trigger movePriorityParam ? priorityParam 
	}

	 
event platformVelocities : Velocities
}

