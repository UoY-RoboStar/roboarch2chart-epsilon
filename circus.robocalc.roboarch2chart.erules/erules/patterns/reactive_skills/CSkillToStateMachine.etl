/********************************************************************************
 * Copyright (c) 2022 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   William Barnett - initial definition
 ********************************************************************************/

import "SkillToStateMachine.etl";

@lazy
rule CSkillToStateMachine
	transform amcsk: RoboArch!CSkill
	to rccskref: RoboChart!StateMachineRef
	extends SkillToStateMachine{

		printDebug("Start - CSkill " + amcsk.name);

		var rccsk = rccskref.ref;

		var skillInterface = ref(InterfacePrefix() + amcsk.name, RoboChart!Interface);


   /*******************
    *  Variables
	*******************/

	// Variables to hold input values
	var variables = new RoboChart!VariableList;

	for (param: RoboArch!Variable in amcsk.parameters){
		var name = param.name + ParameterPostfix();
		var type = param.type;
		variables.vars.add( CreateRCVariable(name, type) );
	}

	for (inp: RoboArch!Variable in amcsk.inputs){
		var name = inp.name;
		var type = inp.type;
		variables.vars.add( CreateRCVariable(name, type) );
	}

	for (out: RoboArch!Variable in amcsk.outputs){
		var name = out.name;
		var type = out.type;
		variables.vars.add( CreateRCVariable(name, type) );
	}


	// Variables for initialisation guard flags
	var initialisationGuardFlags = Set{};
	for (param: RoboArch!Variable in amcsk.parameters){
		var name = param.name + ParameterPostfix() + ParameterInitialisationPostfix();
		var type =  ref("boolean", RoboChartLib_Core!PrimitiveType);
		var value = CreateRCExpression(false);
		initialisationGuardFlags.add( CreateRCVariable(name, type, value) );
	}
	variables.vars.addAll(initialisationGuardFlags);


	rccsk.variableList.add(variables);

   /*******************
    *  States
	*******************/

	var initialJunction = new RoboChart!Initial;
	initialJunction.name = "Initial";

	rccsk.nodes.add( initialJunction );


	//Initialise
	var initialiseState = new RoboChart!State;
	initialiseState.name = "Initialise";

	rccsk.nodes.add( initialiseState );


	//Deactivated
	var deactivatedState = new RoboChart!State;
	deactivatedState.name = "Deactivated";

	rccsk.nodes.add( deactivatedState );


	//Startup
	var startupState = new RoboChart!State;
	startupState.name = "Startup";

	rccsk.nodes.add( startupState );


	//Ready
	var readyState = new RoboChart!State;
	readyState.name = "Ready";

	rccsk.nodes.add( readyState );


	//ComputeOutputs
	var computeoutputsState = new RoboChart!State;
	computeoutputsState.name = "ComputeOutputs";

	rccsk.nodes.add( computeoutputsState );


	//Cleanup
	var cleanupState = new RoboChart!State;
	cleanupState.name = "Cleanup";

	rccsk.nodes.add( cleanupState );



   /*******************
    *  Transitions
	*******************/
	var initialToInitialise = new RoboChart!Transition;
	initialToInitialise.name = "InitialToInitialise";
	initialToInitialise.source = initialJunction;
	initialToInitialise.target = initialiseState;
	rccsk.transitions.add( initialToInitialise );

	printDebug("$$$  guardLoop: " + initialisationGuardFlags.asString() );

	var initGuardExpression;
	if (initialisationGuardFlags.size() = 1){
		//Only a single flag so use it as the guard
		initGuardExpression = CreateRCRefExp( initialisationGuardFlags.unique() );

	} else if (initialisationGuardFlags.size() > 1){
		//Create an expression that ands all of the flags together
		initGuardExpression = AndExp( initialisationGuardFlags.asSequence() );

	} else {
		//Having no guards will not happen since there will always be at least a priority parameter.
	}


	var initialiseToDeactivated = new RoboChart!Transition;
	initialiseToDeactivated.name = "InitialiseToDeactivated";
	initialiseToDeactivated.source = initialiseState;
	initialiseToDeactivated.target = deactivatedState;
	initialiseToDeactivated.condition = initGuardExpression;
	rccsk.transitions.add( initialiseToDeactivated );

	var deactivatedToStartup = new RoboChart!Transition;
	deactivatedToStartup.name = "DeactivatedToStartup";
	deactivatedToStartup.source = deactivatedState;
	deactivatedToStartup.target = startupState;
		var activateTrigger = new RoboChart!Trigger;
		activateTrigger._type = TriggerType#SIMPLE;
		activateTrigger.event = skillInterface.events.select( ev | ev.name.startsWith("activate") ).unique();
	deactivatedToStartup.trigger = activateTrigger;
	rccsk.transitions.add( deactivatedToStartup );

	var startupToReady = new RoboChart!Transition;
	startupToReady.name = "StartupToReady";
	startupToReady.source = startupState;
	startupToReady.target = readyState;
	rccsk.transitions.add( startupToReady );

	var readyToComputoutputs = new RoboChart!Transition;
	readyToComputoutputs.name = "ReadyToComputeoutputs";
	readyToComputoutputs.source = readyState;
	readyToComputoutputs.target = computeoutputsState;
		var executeTrigger = new RoboChart!Trigger;
		executeTrigger._type = TriggerType#SIMPLE;
		executeTrigger.event = skillInterface.events.select( ev | ev.name.startsWith("execute") ).unique();
	readyToComputoutputs.trigger = executeTrigger;
	rccsk.transitions.add( readyToComputoutputs );

	var computeoutputsToReady = new RoboChart!Transition;
	computeoutputsToReady.name = "ComputeoutputsToReady";
	computeoutputsToReady.source = computeoutputsState;
	computeoutputsToReady.target = readyState;
		var completeStatement = new RoboChart!SendEvent;
		var completeTrigger = new RoboChart!Trigger;
		completeTrigger._type = TriggerType#SIMPLE;
		completeTrigger.event = skillInterface.events.select( ev | ev.name.startsWith("complete") ).unique();
		completeStatement.trigger = completeTrigger;
	computeoutputsToReady.action = completeStatement;
	rccsk.transitions.add( computeoutputsToReady );

	var readyToCleanup = new RoboChart!Transition;
	readyToCleanup.name = "ReadyToCleanup";
	readyToCleanup.source = readyState;
	readyToCleanup.target = cleanupState;
		var deactivateTrigger = new RoboChart!Trigger;
		deactivateTrigger._type = TriggerType#SIMPLE;
		deactivateTrigger.event = skillInterface.events.select( ev | ev.name.startsWith("deactivate") ).unique();
	readyToCleanup.trigger = deactivateTrigger;
	rccsk.transitions.add( readyToCleanup );

	var cleanupToDeactivated = new RoboChart!Transition;
	cleanupToDeactivated.name = "CleanupToDeactivated";
	cleanupToDeactivated.source = cleanupState;
	cleanupToDeactivated.target = deactivatedState;
	rccsk.transitions.add( cleanupToDeactivated );


	// Receive value transitions - skill inputs
	for (inp: RoboArch!Variable in amcsk.inputs){
		var readyReceiveEvent = new RoboChart!Transition;
		readyReceiveEvent.name = "ReadyReceive" + inp.name;
		readyReceiveEvent.source = readyState;
		readyReceiveEvent.target = readyState;
			var readyReceiveTrigger = new RoboChart!Trigger;
			readyReceiveTrigger._type = TriggerType#INPUT;
			readyReceiveTrigger.event = skillInterface.events.select( ev | ev.name = (amcsk.name + inp.name) ).unique();
			readyReceiveTrigger.parameter = variables.vars.select( v | v.name = inp.name ).unique();
		readyReceiveEvent.trigger = readyReceiveTrigger;
		rccsk.transitions.add( readyReceiveEvent );
	}

	// Receive value transitions - skill parameters
	for (par: RoboArch!Variable in amcsk.parameters){

		var initialiseReceiveEvent = new RoboChart!Transition;
		initialiseReceiveEvent.name = "InitialiseReceive" + par.name + ParameterPostfix();
		initialiseReceiveEvent.source = initialiseState;
		initialiseReceiveEvent.target = initialiseState;
			var initialiseReceiveTrigger = new RoboChart!Trigger;
			initialiseReceiveTrigger._type = TriggerType#INPUT;
			initialiseReceiveTrigger.event = skillInterface.events.select( ev | ev.name = (amcsk.name + par.name + ParameterPostfix()) ).unique();
			initialiseReceiveTrigger.parameter = variables.vars.select( v | v.name = par.name + ParameterPostfix() ).unique();
		initialiseReceiveEvent.trigger = initialiseReceiveTrigger;
			var monitorFlagRef = CreateRCVarRef( initialisationGuardFlags.select(v | v.name.startsWith(par.name)).unique() );
			var initialiseStatement =  CreateRCAssignment( monitorFlagRef , CreateRCExpression(true));
		initialiseReceiveEvent.action = initialiseStatement;
		rccsk.transitions.add( initialiseReceiveEvent );

		var deactivatedReceiveEvent = new RoboChart!Transition;
		deactivatedReceiveEvent.name = "DeactivatedReceive" + par.name + ParameterPostfix();
		deactivatedReceiveEvent.source = deactivatedState;
		deactivatedReceiveEvent.target = deactivatedState;
			var deactivatedReceiveTrigger = new RoboChart!Trigger;
			deactivatedReceiveTrigger._type = TriggerType#INPUT;
			deactivatedReceiveTrigger.event = skillInterface.events.select( ev | ev.name = (amcsk.name + par.name + ParameterPostfix()) ).unique();
			deactivatedReceiveTrigger.parameter = variables.vars.select( v | v.name = par.name + ParameterPostfix() ).unique();
		deactivatedReceiveEvent.trigger = deactivatedReceiveTrigger;
		rccsk.transitions.add( deactivatedReceiveEvent );

		var readyReceiveEvent = new RoboChart!Transition;
		readyReceiveEvent.name = "ReadyReceive" + par.name + ParameterPostfix();
		readyReceiveEvent.source = readyState;
		readyReceiveEvent.target = readyState;
			var readyReceiveTrigger = new RoboChart!Trigger;
			readyReceiveTrigger._type = TriggerType#INPUT;
			readyReceiveTrigger.event = skillInterface.events.select( ev | ev.name = (amcsk.name + par.name + ParameterPostfix()) ).unique();
			readyReceiveTrigger.parameter = variables.vars.select( v | v.name = par.name + ParameterPostfix() ).unique();
		readyReceiveEvent.trigger = readyReceiveTrigger;
		rccsk.transitions.add( readyReceiveEvent );
	}

}
